pipeline {
  agent {
    label "slurm"
  }
  triggers {
    bitBucketTrigger(
      [
        [
          $class: 'BitBucketPPRPullRequestServerTriggerFilter',
          actionFilter: [
            $class: 'BitBucketPPRPullRequestServerMergedActionFilter',
            allowedBranches: 'release/*'
          ]
        ],
        [
          $class: 'BitBucketPPRPullRequestServerTriggerFilter',
          actionFilter: [
            $class: 'BitBucketPPRPullRequestServerMergedActionFilter',
            allowedBranches: 'main'
          ]
        ]
        [
          $class: 'BitBucketPPRPullRequestServerTriggerFilter',
          actionFilter: [
            $class: 'BitBucketPPRPullRequestServerMergedActionFilter',
            allowedBranches: 'feature/test'
          ]
        ]
      ]
    )
  } // end triggers.
  parameters {
    listGitBranches(
      branchFilter: '.*',
      credentialsId: 'jenkins',
      defaultValue: '${BITBUCKET_TARGET_BRANCH}',
      name: 'BRANCH_TO_BUILD',
      quickFilterEnabled: false,
      remoteURL: 'ssh://git@stash.ihme.washington.edu:7999/scic/jobmon.git',
      selectedValue: 'DEFAULT',
      sortMode: 'NONE',
      tagFilter: '*',
      type: 'PT_BRANCH'
    )
    booleanParam(defaultValue: 'false',
      description: 'If true, Lint step will be skipped',
      name: 'SKIP_LINT')
    booleanParam(defaultValue: 'false',
      description: 'If true, Type-Check step will be skipped',
      name: 'SKIP_TYPE_CHECK')
    booleanParam(defaultValue: 'false',
      description: 'If true, Docs step will be skipped',
      name: 'SKIP_DOCS')
    booleanParam(defaultValue: 'false',
      description: 'If true, Tests step will be skipped',
      name: 'SKIP_TESTS')
    booleanParam(defaultValue: 'true',
      description: 'Whether or not you want to deploy Jobmon to Pypi',
      name: 'DEPLOY_PYPI')
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30'))
  } // End options
  environment {
    // Jenkins commands run in separate processes, so need to activate the environment to run nox.
    ACTIVATE = ". /homes/svcscicompci/miniconda3/bin/activate base"
  } // End environment
  stages {
    stage('Remote Checkout Repo') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: params.BRANCH_TO_BUILD]],
          userRemoteConfigs: scm.userRemoteConfigs
        ])
      } // End step
    } // End remote checkout repo stage
    stage("parallel") {
      parallel {
        stage("Lint") {
          steps {
            script {
              if (params.SKIP_LINT) {
                echo "Skipping Lint"
              }
              else {
                sh "${ACTIVATE} && nox --session lint"
              } // End If-Else
            } // End script
          } // End step
        } // End lint stage
        stage("Typecheck") {
          steps {
            script {
              if (params.SKIP_TYPE_CHECK) {
                echo "Skipping Type-Check"
              }
              else {
                sh "${ACTIVATE} && nox --session typecheck"
              } // End If-Else
            } // End script
          } // End step
        } // End typecheck stage
        stage("Build Docs") {
          steps {
            script {
              if (params.SKIP_DOCS) {
                echo "Skipping Docs"
              }
              else {
                sh "${ACTIVATE} && nox --session docs"
              } // End If-Else
            } // End script
          } // End step
          post {
            always {
              // Publish the documentation.
              publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'out/_html',
                reportFiles: 'index.html',
                reportName: 'Documentation',
                reportTitles: ''
              ])
            } // End Always
          } // End post
        } // End build docs stage
        stage('Tests') {
          agent {
            label "singularity"
          }
          steps {
            script {
              if (params.SKIP_TESTS) {
                echo "Skipping Tests"
              }
              else {
                sh "export PATH=/opt/singularity/bin:$PATH"
                sh "${ACTIVATE} && nox --session tests -- tests/ -n 3"
              } // End If-Else
            } // End script
          } // End step
          post {
            always {
              // Publish the coverage reports.
              publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'jobmon_coverage_html_report',
                reportFiles: 'index.html',
                reportName: 'Coverage Report',
                reportTitles: ''
              ])
              // Publish the test results
              junit([
                testResults: "test_report.xml",
                allowEmptyResults: true
              ])
            } // End Always
          } // End post
        } // End tests stage
      } // End parallel
    } // End parallel stage
    stage ('Build Python Distribution') {
      steps {
        script {
          // Optionally build Python package and publish to Pypi, conditioned on success of tests/lint/typecheck
          if (params.DEPLOY_PYPI) {
            // Artifactory user with write permissions
            withCredentials([usernamePassword(credentialsId: 'artifactory-docker-scicomp',
                                              usernameVariable: 'REG_USERNAME',
                                              passwordVariable: 'REG_PASSWORD')]) {
              sh '''#!/bin/bash
                    . ${WORKSPACE}/ci/deploy_utils.sh
                    upload_python_dist \
                        ${WORKSPACE} \
                        $REG_USERNAME \
                        $REG_PASSWORD \
                        "${ACTIVATE}"
                 '''
            } // end credentials
            env.JOBMON_VERSION_DEPLOYED = sh (
              script: '''#!/bin/bash
                         cat ${WORKSPACE}/jobmon_version_deployed.txt
                      ''',
              returnStdout: true
            ).trim()

            def branch_sections = params.BRANCH_TO_BUILD.split('/')
            env.TARGET_RELEASE = branch_sections[branch_sections.length-1]

            println "Starting jobmon_central_controller for: Jobmon ${JOBMON_VERSION_DEPLOYED} with MODULE_TARGET_RELEASE ${TARGET_RELEASE}"

            build job: "jobmon_central_controller", parameters: [
             listGitBranches(name: 'BRANCH_OF_TAD', value: "feature/GBDSCI-4648_kickoff_from_core_pr_merged"),
             string(name: 'MODULE_OF_CHANGE', value: "jobmon_core"),
             string(name: 'MODULE_TARGET_RELEASE', value: "${TARGET_RELEASE}"),
             string(name: 'ARTIFACT', value: "${JOBMON_VERSION_DEPLOYED}"),
            ]
          } // end if params
          else {
            echo "Not deploying to Pypi"
          } // end else
        } // end script
      } // end steps
    } // end Build Python Distribution stage
  } // end stages
  post {
    always {
      // Delete the workspace directory.
      deleteDir()
    } // End always
  } // End post
} // End pipeline

pipeline {
  agent {
    label "slurm"
  }
  triggers {
    bitBucketTrigger(
      [
        [
          $class: 'BitBucketPPRPullRequestServerTriggerFilter',
          actionFilter: [
            $class: 'BitBucketPPRPullRequestServerMergedActionFilter',
            allowedBranches: 'release/*'
          ]
        ],
        [
          $class: 'BitBucketPPRPullRequestServerTriggerFilter',
          actionFilter: [
            $class: 'BitBucketPPRPullRequestServerMergedActionFilter',
            allowedBranches: 'main'
          ]
        ]
      ]
    )
  } // end triggers.
  parameters {
    listGitBranches(
      branchFilter: '.*',
      credentialsId: 'jenkins',
      defaultValue: '${BITBUCKET_TARGET_BRANCH}',
      name: 'BRANCH_TO_BUILD',
      quickFilterEnabled: false,
      remoteURL: 'ssh://git@stash.ihme.washington.edu:7999/scic/jobmon.git',
      selectedValue: 'DEFAULT',
      sortMode: 'NONE',
      tagFilter: '*',
      type: 'PT_BRANCH'
    )
    booleanParam(defaultValue: 'false',
      description: 'Whether or not you want to lint Jobmon core',
      name: 'SKIP_LINT')
    booleanParam(defaultValue: 'false',
      description: 'Whether or not you want to type-check Jobmon core',
      name: 'SKIP_TYPE_CHECK')
    booleanParam(defaultValue: 'false',
      description: 'Whether or not you want to produce docs for Jobmon core',
      name: 'SKIP_DOCS')
    booleanParam(defaultValue: 'false',
      description: 'Whether or not you want to test Jobmon core',
      name: 'SKIP_TESTS')
    booleanParam(defaultValue: 'true',
      description: 'Whether or not you want to deploy Jobmon to Pypi',
      name: 'DEPLOY_PYPI')
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '30'))
  } // End options
  environment {
    // Jenkins commands run in separate processes, so need to activate the environment to run nox.
    ACTIVATE = ". /homes/svcscicompci/miniconda3/bin/activate base"
  } // End environment
  stages {
    stage('Remote Checkout Repo') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: params.BRANCH_TO_BUILD]],
          userRemoteConfigs: scm.userRemoteConfigs
        ])
      } // End step
    } // End remote checkout repo stage
    stage("parallel") {
      parallel {
        stage("Lint") {
          if (params.SKIP_LINT) {
            echo "Skipping Lint"
          }
          else {
            steps {
              sh "${ACTIVATE} && nox --session lint"
            } // End step
          } // End If-Else
        } // End lint stage
        stage("Typecheck") {
          if (params.SKIP_TYPE_CHECK) {
            echo "Skipping Type-Check"
          }
          else {
            steps {
              sh "${ACTIVATE} && nox --session typecheck"
            } // End step
          } // End If-Else
        } // End typecheck stage
        stage("Build Docs") {
          if (params.SKIP_DOCKS) {
            echo "Skipping Docs"
          }
          else {
            steps {
              sh "${ACTIVATE} && nox --session docs"
            } // End step
            post {
              always {
                // Publish the documentation.
                publishHTML([
                  allowMissing: true,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'out/_html',
                  reportFiles: 'index.html',
                  reportName: 'Documentation',
                  reportTitles: ''
                ])
              } // End always
            } // End post
          } // End If-Else
        } // End build docs stage
        stage('Tests') {
          if (params.SKIP_TESTS) {
            echo "Skipping Tests"
          }
          else {
            steps {
               sh "${ACTIVATE} && nox --session tests -- tests/ -n 3"
              }
            post {
              always {
                // Publish the coverage reports.
                publishHTML([
                  allowMissing: true,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'jobmon_coverage_html_report',
                  reportFiles: 'index.html',
                  reportName: 'Coverage Report',
                  reportTitles: ''
                ])
                // Publish the test results
                junit([
                  testResults: "test_report.xml",
                  allowEmptyResults: true
                ])
              } // End always
            } // End post
          } // End If-Else
        } // End tests stage
      } // End parallel
    } // End parallel stage
//    stage ('Build Python Distribution') {
//      steps {
//        script {
//          // Optionally build Python package and publish to Pypi, conditioned on success of tests/lint/typecheck
//          if (params.DEPLOY_PYPI) {
//            // Artifactory user with write permissions
//            withCredentials([usernamePassword(credentialsId: 'artifactory-docker-scicomp',
//                                              usernameVariable: 'REG_USERNAME',
//                                              passwordVariable: 'REG_PASSWORD')]) {
//              sh '''#!/bin/bash
//                    . ${WORKSPACE}/ci/deploy_utils.sh
//                    upload_python_dist \
//                        ${WORKSPACE} \
//                        $REG_USERNAME \
//                        $REG_PASSWORD \
//                        "${ACTIVATE}"
//                 '''
//            } // end credentials
//          } // end if params
//          else {
//            echo "Not deploying to Pypi"
//          } // end else
//        } // end script
//      } // end steps
//    } // end Build Python Distribution stage
  } // end stages
  post {
    always {
      // Delete the workspace directory.
      deleteDir()
    } // End always
  } // End post
} // End pipeline
